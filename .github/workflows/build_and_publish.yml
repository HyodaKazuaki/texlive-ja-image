name: build and publish docker image

on:
  push:
    branches:
      - master
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Choose one from from_iso or from_net
  INSTALL_METHOD: from_iso
  MOUNT_DIR: texlive
  DEFAULT_VERSION: "2023"
  DEFAULT_OPTION: "default"

defaults:
  run:
    shell: bash

jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        version: ["2023", "2022", "2021", "2020", "2019"]
        option: ["default", "full"]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check final ISO file existence
        id: final-iso
        shell: bash
        run: |
          set -eux

          # Check final ISO file existence.
          existfin=0
          curl -s -LI -u anonymous:FTP ftp://tug.org/historic/systems/texlive/${{ matrix.version }}/tlnet-final/texlive.iso || existfin=$?

          echo "existfin=${existfin}" >> "$GITHUB_OUTPUT"
      - name: Cache ISO file
        id: cache-iso
        uses: actions/cache@v3
        with:
          path: texlive.iso
          key: ${{ matrix.version }}-${{ steps.final-iso.outputs.existfin }}
      - name: Download ISO file
        if: steps.cache-iso.outputs.cache-hit != 'true' && env.INSTALL_METHOD == 'from_iso'
        shell: bash
        run: |
          set -eux

          if [ "${{ steps.final-iso.outputs.existfin }}" -eq "0" ]; then
            # Download final version from ftp.
            curl --retry 5 -O -u anonymous:FTP ftp://tug.org/historic/systems/texlive/${{ matrix.version }}/tlnet/final/texlive.iso
          else
            # Download latest version from mirror.
            curl -OL http://mirror.ctan.org/systems/texlive/Images/texlive.iso
          fi
          - name: Mount ISO file
          shell: bash
          run: |
            set -eux

            mkdir ${{ env.MOUNT_DIR }}
            sudo mount -o loop -t iso9660 texlive.iso ${{ env.MOUNT_DIR }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw, value=${{ matrix.version }}-${{ matrix.option }}
            type=raw, value=${{ matrix.version }}-${{ matrix.option }}-{{sha}}
            type=raw, value=${{ matrix.version }}, enable=${{ env.DEFAULT_OPTION == matrix.option }}
            type=raw, value=${{ matrix.version }}-{{sha}}, enable=${{ env.DEFAULT_OPTION == matrix.option }}
            type=raw, value=latest, enable=${{ env.DEFAULT_OPTION == matrix.option && env.DEFAULT_VERSION == matrix.version }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            builder_name=${{ env.INSTALL_METHOD }}
            iso_dir=${{ env.MOUNT_DIR }}
            version=${{ matrix.version }}
            option=${{ matrix.option }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
