name: test

on:
  push:
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Choose one from from_iso or from_net
  INSTALL_METHOD: from_iso
  HISTRIC_MIRROR: https://ftp.math.utah.edu/pub/tex/historic/systems/texlive
  ISO_MIRROR: http://mirror.ctan.org/systems/texlive/Images/texlive.iso
  MOUNT_DIR: texlive
  DEFAULT_VERSION: "2023"
  DEFAULT_OPTION: "default"
  PLATFORMS: linux/amd64,linux/arm64

defaults:
  run:
    shell: bash

jobs:
  build-test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        version: ["2023", "2022", "2021", "2020", "2019"]
        option: ["default", "full"]
    steps:
      # Remove unused tools since the runner storage is oppressed by them.
      # ref. https://github.com/orgs/community/discussions/25678
      - name: Check disk space
        run: df -h
      - name: Checkout Apache Flink for disk clean-up
        uses: actions/checkout@v4
        with:
          repository: apache/flink
          path: third_party/flink
          ref: release-1.17.1
      - name: Clean-up disk
        working-directory: third_party/flink
        run: sh ./tools/azure-pipelines/free_disk_space.sh
      - name: Remove Apache Flink
        run: rm -r third_party/flink
      - name: Remove docker extra data
        run: docker rmi $(docker images -q -a)
      - name: Check disk space again
        run: df -h
      - name: Listing 100 largest packages
        run: dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
      - name: Listing 100 largest directories
        run: sudo du -h --max-depth=1 / | sort -rh | head -n 100 || true
      - name: Listing 100 largest directories from /opt
        run: sudo du -h --max-depth=1 /opt | sort -rh | head -n 100 || true
      - name: Listing 100 largest directories from /opt/hostedtoolcache
        run: sudo du -h --max-depth=1 /opt/hostedtoolcache | sort -rh | head -n 100 || true
      - name: Listing 100 largest directories from /usr
        run: sudo du -h --max-depth=1 /usr | sort -rh | head -n 100 || true
      - name: Listing 100 largest directories from /usr/lib
        run: sudo du -h --max-depth=1 /usr/lib | sort -rh | head -n 100 || true
      - name: Listing 100 largest directories from /usr/share
        run: sudo du -h --max-depth=1 /usr/share | sort -rh | head -n 100 || true
      - name: Listing 100 largest directories from /usr/local
        run: sudo du -h --max-depth=1 /usr/local | sort -rh | head -n 100 || true
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check final ISO file existence
        id: final-iso
        shell: bash
        run: |
          set -eux

          # Check final ISO file existence.
          existfin=0
          existfin=`curl -LI ${{ env.HISTRIC_MIRROR }}/${{ matrix.version }}/tlnet-final/install-tl-unx.tar.gz -o /dev/null -w '%{http_code}\n' -s`

          echo "existfin=${existfin}" >> "$GITHUB_OUTPUT"
      - name: Cache ISO file
        id: cache-iso
        uses: actions/cache@v3
        with:
          path: texlive.iso
          key: texlive-iso-${{ matrix.version }}-${{ steps.final-iso.outputs.existfin }}
      - name: Download ISO file
        if: steps.cache-iso.outputs.cache-hit != 'true' && env.INSTALL_METHOD == 'from_iso'
        shell: bash
        run: |
          set -eux

          if [ "${{ steps.final-iso.outputs.existfin }}" -eq "200" ]; then
            # Download final version from historic archive.
            curl -LO ${{ env.HISTRIC_MIRROR }}/${{ matrix.version }}/texlive.iso
          else
            # Download latest version from mirror.
            curl -OL ${{ env.ISO_MIRROR }}
          fi
      - name: Mount ISO file
        if: env.INSTALL_METHOD == 'from_iso'
        shell: bash
        run: |
          set -eux

          mkdir ${{ env.MOUNT_DIR }}
          sudo mount -o loop -t iso9660 texlive.iso ${{ env.MOUNT_DIR }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw, value=${{ matrix.version }}-${{ matrix.option }}
            type=raw, value=${{ matrix.version }}-${{ matrix.option }}-{{sha}}
            type=raw, value=${{ matrix.version }}, enable=${{ env.DEFAULT_OPTION == matrix.option }}
            type=raw, value=${{ matrix.version }}-{{sha}}, enable=${{ env.DEFAULT_OPTION == matrix.option }}
            type=raw, value=latest, enable=${{ env.DEFAULT_OPTION == matrix.option && env.DEFAULT_VERSION == matrix.version }}
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          build-args: |
            builder_name=${{ env.INSTALL_METHOD }}
            iso_dir=${{ env.MOUNT_DIR }}
            version=${{ matrix.version }}
            option=${{ matrix.option }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
